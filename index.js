require('dotenv').config();

const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const dayjs = require('dayjs');
const utc = require('dayjs/plugin/utc');
const cron = require('node-cron');

dayjs.extend(utc);

const token = process.env.TELEGRAM_TOKEN;
const WEBHOOK_URL = process.env.WEBHOOK_URL;
const CHAT_ID = process.env.CHAT_ID;
const PORT = process.env.PORT || 3000;

if (!token || !WEBHOOK_URL || !CHAT_ID) {
  console.error('ERROR: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN, WEBHOOK_URL –∏–ª–∏ CHAT_ID');
  process.exit(1);
}

const app = express();
app.use(express.json());

const bot = new TelegramBot(token, { webHook: true });

const birthdays = require('./birthdays.json');

function checkBirthdays(chatContext = null) {
    const today = dayjs().utc().startOf('day');
    const thisYear = today.year();
    let found = false;
  
    birthdays.forEach(({ name, date }) => {
      const birthdayThisYear = dayjs(`${thisYear}-${date}`);
      const diff = birthdayThisYear.diff(today, 'day');
  
      if (diff === 2) {
        const msg = `üìÖ –ß–µ—Ä–µ–∑ 2 –¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É "${name}"!`;
        console.log(msg);
        bot.sendMessage(CHAT_ID, msg);
        if (chatContext) bot.sendMessage(chatContext, msg);
        found = true;
      } else if (diff === 0) {
        const msg = `üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É "${name}"! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!`;
        console.log(msg);
        bot.sendMessage(CHAT_ID, msg);
        if (chatContext) bot.sendMessage(chatContext, msg);
        found = true;
      }
    });
  
    if (!found && chatContext) {
      const msg = 'üéà –í –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ –Ω–µ—Ç –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π.';
      console.log(msg);
      bot.sendMessage(chatContext, msg);
    }
  }

app.post('/webhook', (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

app.get('/', (req, res) => {
    res.send(`
      <html>
        <head>
          <title>Birthday Bot</title>
          <style>
            body {
              font-family: Arial, sans-serif;
              text-align: center;
              margin-top: 100px;
              background-color: #f9f9f9;
              color: #333;
            }
            .emoji {
              font-size: 3rem;
            }
          </style>
        </head>
        <body>
          <div class="emoji">üéâü§ñüéà</div>
          <h1>Birthday Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!</h1>
          <p>Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –±–æ—Ç –Ω–∞ —Å–≤—è–∑–∏.</p>
        </body>
      </html>
    `);
  });

app.listen(PORT, async () => {
  console.log(`Server listening on port ${PORT}`);

  try {
    const botInfo = await bot.getMe();
    console.log('‚úÖ –¢–æ–∫–µ–Ω —Ä–∞–±–æ—á–∏–π. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:', botInfo);

    await bot.setWebHook(`${WEBHOOK_URL}/webhook`);
    console.log('Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞:', `${WEBHOOK_URL}/webhook`);

    bot.sendMessage(CHAT_ID, '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è!');
    checkBirthdays();
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', err);
    process.exit(1);
  }
});

bot.on('message', (msg) => {
  console.log('–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', JSON.stringify(msg, null, 2));
});

bot.onText(/\/start/, (msg) => {
  console.log('–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:', msg.from);
  bot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è.');
});

bot.onText(/\/check/, (msg) => {
    console.log('–ö–æ–º–∞–Ω–¥–∞ /check –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç:', msg.from);
    bot.sendMessage(msg.chat.id, 'üîç –ü—Ä–æ–≤–µ—Ä—è—é –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è...');
    checkBirthdays(msg.chat.id); // ‚Üê –ø–µ—Ä–µ–¥–∞—ë–º ID —á–∞—Ç–∞, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
  });

// Cron-–∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (–ø—Ä–∏–º–µ—Ä ‚Äî 06:35 UTC = 11:35 –¢–∞—à–∫–µ–Ω—Ç)
cron.schedule('30 2 * * *', () => {
  console.log('‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –≤ 7:30 –ø–æ –¢–∞—à–∫–µ–Ω—Ç—É (02:30 UTC)...');
  checkBirthdays();
});